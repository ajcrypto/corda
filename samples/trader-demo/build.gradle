apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordformation'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // The trader demo CorDapp depends upon Cash CorDapp features
    cordapp project(':finance:contracts')
    cordapp project(':finance:workflows')
    cordapp project(':samples:bank-of-corda-demo')
    cordapp project(':samples:trader-demo:workflows-trader')

    // Corda integration dependencies
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    cordaRuntime project(path: ":webserver:webcapsule", configuration: 'runtimeArtifacts')

    testCompile project(':test-utils')
    testCompile "junit:junit:$junit_version"
    testCompile "org.assertj:assertj-core:${assertj_version}"
}

def nodeTask = tasks.getByPath(':node:capsule:assemble')
def webTask = tasks.getByPath(':webserver:webcapsule:assemble')
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar', nodeTask, webTask]) {
    ext.rpcUsers = [['username': "demo", 'password': "demo", 'permissions': ["ALL"]]]
    nodeDefaults {
        projectCordapp {
            deploy = false // TODO This is a bug, project cordapp should be disabled if no cordapp plugin is applied.
        }
        cordapp project(':finance:workflows')
        cordapp project(':finance:contracts')
        cordapp project(':samples:trader-demo:workflows-trader')
    }
    directory "./build/nodes"
    node {
        name "O=Notary Service,L=Zurich,C=CH"
        notary = [validating : true]
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10014']
    }
    node {
        name "O=Bank A,L=London,C=GB"
        p2pPort 10005
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10007"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10015']
    }
    node {
        name "O=Bank B,L=New York,C=US"
        p2pPort 10008
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10010"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10016']
    }
    node {
        name "O=BankOfCorda,L=New York,C=US"
        p2pPort 10011
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10012"
            adminAddress "localhost:10013"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10017']
    }
    
    //All other nodes should be using LoggingBuyerFlow as it is a subclass of BuyerFlow
    node {
        name "O=NonLogging Bank,L=London,C=GB"
        p2pPort 10025
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10026"
            adminAddress "localhost:10027"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10035']
        flowOverride("net.corda.traderdemo.flow.SellerFlow", "net.corda.traderdemo.flow.BuyerFlow")
    }
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

task runBank(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.traderdemo.TraderDemoKt'
    args '--role'
    args 'BANK'
}

task runSeller(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.traderdemo.TraderDemoKt'
    args '--role'
    args 'SELLER'
}
